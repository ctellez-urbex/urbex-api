service: urbex-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  region: 'us-east-2'
  stage: ${opt:stage, 'prod'}

  apiGateway:
    apiKeys:
      - urbex-api-key-${self:provider.stage}  # Serverless crea ApiKey y UsagePlan autom√°ticamente

  environment:
    STAGE: ${self:provider.stage}
    DEBUG: false
    MAILGUN_API_KEY: ${env:MAILGUN_API_KEY}
    MAILGUN_DOMAIN: ${env:MAILGUN_DOMAIN}
    ADMIN_EMAIL: ${env:ADMIN_EMAIL}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    COGNITO_REGION: ${env:COGNITO_REGION}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource: "*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

  memorySize: 512
  timeout: 30
  logRetentionInDays: 14

functions:
  api:
    handler: app.main.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY
      - httpApi:
          path: /
          method: GET
      - httpApi:
          path: /health
          method: GET
      - httpApi:
          path: /docs
          method: GET
      - httpApi:
          path: /redoc
          method: GET
      - httpApi:
          path: /openapi.json
          method: GET
      - http:
          path: /api/v1/contact
          method: POST
          cors: true
          private: true
      - http:
          path: /api/v1/login
          method: POST
          cors: true
          private: true

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
    requirementsFile: requirements-prod.txt
    noDeploy:
      - black
      - isort
      - flake8
      - mypy
      - pre-commit
      - pytest
      - pytest-*
      - coverage
    zip: false
    slim: false
    usePoetry: false
    useStaticCache: false
    useDownloadCache: false

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: given_name
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Required: false
            Mutable: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
